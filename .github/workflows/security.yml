name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  dependency-check:
    runs-on: ubuntu-latest
    name: Dependency Security Check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install asdf & tools
        uses: asdf-vm/actions/install@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Check for known vulnerabilities
      - name: Run npm audit
        run: |
          pnpm audit --audit-level high
        continue-on-error: true

      # Alternative audit with better reporting
      - name: Run security audit with better-npm-audit
        run: |
          npx better-npm-audit audit --level high
        continue-on-error: true

      # Check for outdated dependencies
      - name: Check for outdated dependencies
        run: |
          pnpm outdated || echo "Some dependencies are outdated"

  codeql-analysis:
    runs-on: ubuntu-latest
    name: CodeQL Analysis
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'typescript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality

      - name: Install asdf & tools
        uses: asdf-vm/actions/install@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  secrets-scan:
    runs-on: ubuntu-latest
    name: Secrets Scanning
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for better secret detection

      # Use TruffleHog to scan for secrets
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  license-check:
    runs-on: ubuntu-latest
    name: License Compliance Check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install asdf & tools
        uses: asdf-vm/actions/install@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Check licenses of dependencies
      - name: Check dependency licenses
        run: |
          npx license-checker --summary
          npx license-checker --failOn 'GPL;AGPL;LGPL' || echo "GPL-style licenses found - review required"

  supply-chain-security:
    runs-on: ubuntu-latest
    name: Supply Chain Security
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install asdf & tools
        uses: asdf-vm/actions/install@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Check for suspicious packages
      - name: Check package integrity
        run: |
          # Verify package integrity
          pnpm audit signatures || echo "Package signature verification failed"
          
          # Check for typosquatting
          echo "Checking for potential typosquatting..."
          pnpm ls --depth=0 | grep -E "(moment|lodash|express|react)" || echo "No common typosquatting targets found"

      # Generate SBOM (Software Bill of Materials)
      - name: Generate SBOM
        run: |
          npx @cyclonedx/cyclonedx-npm --output-file sbom.json
          echo "SBOM generated successfully"

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json
